#!./lcfit.top -I _build/common_src -I _build/pplacer_src -I _build/lcfit_src -I /home/matsengrp/opam-local/3.12.1/lib/batteries

open Ppatteries
open Lcfit

module T = Lcfit.Tripod


(* let pt = (0.2, 1., -1.69) *)

(* let rx = Lcfit.est_rx m pt *)

(* (\* A troublesome point *\) *)
(* let trouble = (0.0674438203587,0.222223111111,-11622.3519228) *)

(* let rx_trouble = Lcfit.est_rx m trouble *)

(* (\* Try primitive scaling first *\) *)
(* let scaled = Lcfit.rescale trouble m *)
(* let rx_trouble_scaled = Lcfit.est_rx scaled trouble *)

(* let trouble2 = (0.0674438203587,1.11111155556,-11651.3040502) *)

(* let rx_trouble2 = Lcfit.est_rx m trouble2 *)

let to_fit = [|
(0.000001,0.222223,-11612.180797);
    (0.011842,0.222223,-11612.180803);
    (0.001317,0.222223,-11612.180930);
    (0.010527,0.222223,-11612.180935);
    (0.002632,0.222223,-11612.181029);
    (0.009211,0.222223,-11612.181033);
    (0.003948,0.222223,-11612.181096);
    (0.007895,0.222223,-11612.181098);
    (0.005264,0.222223,-11612.181130);
    (0.006580,0.222223,-11612.181130);
    (0.000001,0.444445,-11620.711844);
    (0.011842,0.444445,-11620.711850);
    (0.001317,0.444445,-11620.711972);
    (0.010527,0.444445,-11620.711977);
    (0.002632,0.444445,-11620.712068);
    (0.009211,0.444445,-11620.712071);
    (0.003948,0.444445,-11620.712133);
    (0.007895,0.444445,-11620.712134);
    (0.005264,0.444445,-11620.712165);
    (0.006580,0.444445,-11620.712166);
    (0.000001,0.666667,-11629.451837);
    (0.011842,0.666667,-11629.451842);
    (0.001317,0.666667,-11629.451954);
    (0.010527,0.666667,-11629.451958);
    (0.002632,0.666667,-11629.452042);
    (0.009211,0.666667,-11629.452045);
    (0.003948,0.666667,-11629.452102);
    (0.007895,0.666667,-11629.452103);
    (0.005264,0.666667,-11629.452132);
    (0.006580,0.666667,-11629.452132);
    (0.006580,0.000001,-11633.457333);
    (0.005264,0.000001,-11633.458843);
    (0.007895,0.000001,-11633.693989);
    (0.003948,0.000001,-11633.698896);
    (0.009211,0.000001,-11634.234139);
    (0.002632,0.000001,-11634.243964);
    (0.010527,0.000001,-11635.289617);
    (0.001317,0.000001,-11635.309337);
    (0.011842,0.000001,-11637.794046);
    (0.000001,0.000001,-11637.855150);
    (0.000001,0.888889,-11637.891424);
    (0.011842,0.888889,-11637.891429);
    (0.001317,0.888889,-11637.891531);
    (0.010527,0.888889,-11637.891534);
    (0.002632,0.888889,-11637.891610);
    (0.009211,0.888889,-11637.891613);
    (0.003948,0.888889,-11637.891664);
    (0.007895,0.888889,-11637.891665);
    (0.005264,0.888889,-11637.891691);
    (0.006580,0.888889,-11637.891691);
    (0.000001,1.111112,-11645.881632);
    (0.011842,1.111112,-11645.881636);
    (0.001317,1.111112,-11645.881727);
    (0.010527,1.111112,-11645.881730);
    (0.002632,1.111112,-11645.881799);
    (0.009211,1.111112,-11645.881801);
    (0.003948,1.111112,-11645.881847);
    (0.007895,1.111112,-11645.881848);
    (0.005264,1.111112,-11645.881870);
    (0.006580,1.111112,-11645.881871);
    (0.000001,1.333334,-11653.372712);
    (0.011842,1.333334,-11653.372715);
    (0.001317,1.333334,-11653.372796);
    (0.010527,1.333334,-11653.372799);
    (0.002632,1.333334,-11653.372859);
    (0.009211,1.333334,-11653.372861);
    (0.003948,1.333334,-11653.372902);
    (0.007895,1.333334,-11653.372903);
    (0.005264,1.333334,-11653.372923);
    (0.006580,1.333334,-11653.372923);
    (0.000001,1.555556,-11660.357598);
    (0.011842,1.555556,-11660.357601);
    (0.001317,1.555556,-11660.357672);
    (0.010527,1.555556,-11660.357674);
    (0.002632,1.555556,-11660.357728);
    (0.009211,1.555556,-11660.357730);
    (0.003948,1.555556,-11660.357765);
    (0.007895,1.555556,-11660.357766);
    (0.005264,1.555556,-11660.357784);
    (0.006580,1.555556,-11660.357784);
    (0.000001,1.777778,-11666.851907);
    (0.011842,1.777778,-11666.851909);
    (0.001317,1.777778,-11666.851972);
    (0.010527,1.777778,-11666.851974);
    (0.002632,1.777778,-11666.852021);
    (0.009211,1.777778,-11666.852022);
    (0.003948,1.777778,-11666.852054);
    (0.007895,1.777778,-11666.852054);
    (0.005264,1.777778,-11666.852070);
    (0.006580,1.777778,-11666.852070);
    (0.000001,2.000000,-11672.884107);
    (0.011842,2.000000,-11672.884109);
    (0.001317,2.000000,-11672.884164);
    (0.010527,2.000000,-11672.884166);
    (0.002632,2.000000,-11672.884207);
    (0.009211,2.000000,-11672.884208);
    (0.003948,2.000000,-11672.884235);
    (0.007895,2.000000,-11672.884236);
    (0.005264,2.000000,-11672.884250);
    (0.006580,2.000000,-11672.884250); |]

let to_fit_top = to_fit |> Array.enum |> Enum.take 50 |> Array.of_enum

let max_pt = to_fit.(0)
let pt2 = (0.000001,1.111112,-11645.881632)

let m = {T.n00=4029.954563;
         T.n01=805.990913;
         T.n10=805.990913;
         T.n11=805.990913;
         T.r=1.000000;
         T.b=0.500000;
         T.t=0.011843;
         T.rx=0.100000;
         T.bx=0.500000}

let scaled = T.rescale max_pt m

let l0 = Tuple3.third max_pt
let l1 = Tuple3.third pt2

let fit = Result.catch (T.fit scaled) to_fit_top
let fit2 = T.fit {scaled with T.rx=l0-.l1} to_fit_top
